#ifndef CHARTBARMORTALITYRATES_H
#define CHARTBARMORTALITYRATES_H

#include "ChartBar.h"
#include "nmfOutputChart3DBarModifier.h"

class ChartBarMortalityRates : public ChartBar
{
    nmfOutputChart3DBarModifier* m_modifier;
    QWidget*      chartView3DContainer;
    QVBoxLayout*  vlayt;
    QTableWidget* DataTable;
    nmfLogger*    logger;

signals:
    void draw3DChart();

private:

    std::map<std::string, void(*)(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &selectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme
            )> GetDataFunctionMap;

public:

    ChartBarMortalityRates(
            QVBoxLayout*                 theVlayt,
            nmfOutputChart3DBarModifier* m_modifier,
            QWidget*                     theChartView3DContainer,
            QTableWidget*                theDataTable,
            nmfLogger*                   logger);
    virtual ~ChartBarMortalityRates() {}

    static void clearWidgets(QVBoxLayout *vlayt);

    static void getYearsAndAges(
            nmfDatabase *databasePtr,
            const std::string &MSVPAName,
            const std::string &species,
            int &NumYears,
            int &NumAges);

    // Had to make these static so the GetDataFunctionMap would work.
    static void getConversionScaleFactorAndYLabel(
            nmfDatabase* databasePtr,
            std::string &SelectedPredator,
            std::string &SelectedVariable,
            double &NConversion,
            std::string &yLabelConversion);

    static void loadChartWithData(
            QChart *chart,
            QStackedBarSeries *series,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &LegendNames);

    static void setTitles(
            QChart *chart,
            QStackedBarSeries *series, QStringList categories,
            std::string species, std::string byVariables,
            bool rearrangeTitle, std::string dataType,
            std::string xLabel, std::string yLabel,
            std::string suffix,
            int Theme);

    static void getAndLoadFishingMortalityDataMSVPA(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadAverageRecruitedFDataMSVPA(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadPredationMortalityDataMSVPA(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadPredationMortalityByPredatorDataMSVPA(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadPredationMortality3DDataMSVPA(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadTotalFisheryCatchDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadFisheryCatchAtAgeDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadTotalFisheryYieldDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadFisheryYieldAtAgeDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadFisheryMortalityRateAtAgeDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadAverageRecruitedFDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);


    static void getAndLoadPredationMortalityRateDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);

    static void getAndLoadPredationMortalityByPredatorDataForecast(
            nmfDatabase *databasePtr,
            std::string &ModelName,
            std::string &MSVPAName,
            std::string &ForecastName,
            std::string &ScenarioName,
            int &MSVPA_NYears,
            int &MSVPA_FirstYear,
            int &MSVPA_LastYear,
            int &Nage,
            std::string &SelectedSpecies,
            std::string &SelectedSpeciesAgeSizeClass,
            std::string &SelectedVariable,
            std::string &SelectedByVariables,
            std::string &SelectedSeason,
            std::string &SelectedPreyName,
            std::string &SelectedMode,
            int &SeasonInt,
            int &SpeAge,
            std::string &MaxScaleY,
            int &offset,
            boost::numeric::ublas::matrix<double> &GridData,
            boost::numeric::ublas::matrix<double> &ChartData,
            QStringList &RowLabels,
            QStringList &ColumnLabels,
            QChart *chart,
            std::string &yLabel,
            std::string &yLabelConversion,
            double &NConversion,
            QVBoxLayout *vlayt,
            nmfOutputChart3DBarModifier *m_modifier,
            QWidget *chartView3DContainer,
            int &Theme);


public slots:
    void callback_UpdateChart(nmfStructsQt::UpdateDataStruct data);

};

#endif // CHARTBARMORTALITYRATES_H
